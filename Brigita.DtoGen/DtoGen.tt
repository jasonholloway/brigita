<#@ template  debug="true" hostSpecific="true" #>
<#@ output extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ assembly name="$(SolutionDir)Brigita.DtoGen\bin\debug\brigita.dtogen.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ import namespace="System.Reflection" #>
<#@ import namespace="Brigita.DtoGen" #>
<#+
	void GenerateDto<I>(string fullName, string[] otherNamespaces = null) 
	{
		GenerateDto(
			new[] { typeof(I) },
			fullName,
			otherNamespaces
		);
	}

	void GenerateDto<I1, I2>(string fullName, string[] otherNamespaces = null) 
	{
		GenerateDto(
			new[] { typeof(I1), typeof(I2) },
			fullName,
			otherNamespaces
		);
	}
	
	void GenerateDto<I1, I2, I3>(string fullName, string[] otherNamespaces = null) 
	{
		GenerateDto(
			new[] { typeof(I1), typeof(I2), typeof(I3) },
			fullName,
			otherNamespaces
		);
	}
	
	void GenerateDto<I1, I2, I3, I4>(string fullName, string[] otherNamespaces = null) 
	{
		GenerateDto(
			new[] { typeof(I1), typeof(I2), typeof(I3), typeof(I4) },
			fullName,
			otherNamespaces
		);
	}



	void GenerateDto(Type[] intTypes, string fullName, string[] otherNamespaces = null) 
	{
		var spec = DtoSpecBuilder.Build(intTypes, fullName);
		
		var typeScriber = new TypeScriber(
									new[] { spec.Namespace }
									.Concat(spec.Interfaces.Select(i => i.Namespace).Distinct())
									.Concat(otherNamespaces ?? new string[0]));



		//should check interface here...

		foreach(var ns in typeScriber.Namespaces.Skip(1).OrderBy(s => s)) {
#>using <#=ns#>;
<#+
        }

#>

namespace <#=spec.Namespace#> {

	public partial class <#=spec.Name#> : <#=string.Join(", ", spec.Interfaces.Select(i => typeScriber.WriteFullTypeName(i)).ToArray())#>
	{
<#+
		foreach(var prop in spec.Props) {
#>
		public <#=typeScriber.WriteFullTypeName(prop.PropertyType)#> <#=prop.Name#> { get; set; }
<#+
        }
#>

<#+		
		foreach(var baseInt in spec.Interfaces) {
#>

		public void PopulateFrom(<#=typeScriber.WriteFullTypeName(baseInt)#> input) {
<#+
			foreach(var prop in baseInt.GatherAllProps()) {
#>
			this.<#=prop.Name#> = input.<#=prop.Name#>;
<#+
            }
#>
		}
<#+
        }

		#>
	}
}
<#+
    }
#>
